#include "encoder.hpp"

static const uint8_t aTable1[] = {
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xF0,0xE1,0xD2,0xc3
};
static const uint8_t aTable2[] = {
    0xF0, 0xED, 0x53, 0xB8, 0x32, 0x44, 0xF1, 0xF8, 0x76, 0xC6,
    0x79, 0x59, 0xFD, 0x4F, 0x13, 0xA2, 0xC1, 0x51, 0x6F, 0xEC,
    0x54, 0x83, 0xC2, 0x34, 0x77, 0x49, 0x43, 0xA2, 0x7D, 0xE2,
    0x65, 0x96, 0x5E, 0x53, 0x98, 0x78, 0x9A, 0x17, 0xA3, 0x3D,
    0xD3, 0x83, 0xA8, 0xB8, 0x29, 0xFB, 0xDC, 0xA5, 0x55, 0xD7,
    0x02, 0x77, 0x84, 0x13, 0xAC, 0xDD, 0xF9, 0xB8, 0x32, 0x16,
    0x61, 0x0E, 0x6D, 0xFA
};

void encode_decode(uint8_t* buffer, size_t size ) {
    uint8_t iTable2Index = 10;
    for (size_t index = 0; index < size;index++) {
        uint8_t iTable1Index = index % 20;
        auto byte = static_cast<uint8_t>((index - 1) * static_cast<uint8_t>(index));
        byte ^= aTable1[iTable1Index];
        byte ^= aTable2[iTable2Index];
        buffer[index] ^= byte;
        iTable2Index = (iTable2Index + 5) % 59;
    }
}
